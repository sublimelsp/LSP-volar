{
  "contributions": {
    "settings": [
      {
        "file_patterns": [
          "/LSP-volar.sublime-settings"
        ],
        "schema": {
          "$id": "sublime://settings/LSP-volar",
          "definitions": {
            "PluginConfig": {
              "properties": {
                "initializationOptions": {
                  "additionalProperties": false,
                  "properties": {
                    "additionalExtensions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": [],
                      "description": "List any additional file extensions that should be processed as Vue files."
                    },
                    "disableFileWatcher": {
                      "type": "boolean",
                      "default": false,
                      "description": "Disable file watcher in language server for better performance."
                    },
                    "json.customBlockSchemaUrls": {
                      "type": "object"
                    },
                    "maxOldSpaceSize": {
                      "default": null,
                      "description": "Set --max-old-space-size option on server process. If you have problem on frequently \"Request textDocument/** failed.\" error, try setting higher memory(MB) on it.",
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "noProjectReferences": {
                      "type": "boolean",
                      "default": false,
                      "description": "Ignore project references settings of tsconfig in language server for resolve issue https://github.com/johnsoncodehk/volar/issues/1344params.textDocument, ."
                    },
                    "respectClientCapabilities": {
                      "type": "boolean",
                      "default": true
                    },
                    "reverseConfigFilePriority": {
                      "type": "boolean",
                      "default": false,
                      "description": "Reverse priority for tsconfig pickup."
                    },
                    "typescript": {
                      "additionalProperties": false,
                      "properties": {
                        "tsdk": {
                          "type": "string",
                          "description": "Path to tsserver's lib directory."
                        },
                      }
                    },
                    "ignoreTriggerCharacters": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "maxLength": 1
                      },
                      "default": [],
                      "description": "Defines which auto-complete popup trigger characters that Volar defines are allowed.\nBy default all Volar trigger characters are disabled as ST does a better job."
                    },
                  },
                },
                "settings": {
                  "additionalProperties": false,
                  "properties": {
                    "emmet.excludeLanguages": {
                      "default": [
                        "markdown"
                      ],
                      "items": {
                        "type": "string"
                      },
                      "markdownDescription": "An array of languages where Emmet abbreviations should not be expanded.",
                      "type": "array"
                    },
                    "emmet.preferences": {
                      "default": {},
                      "markdownDescription": "Preferences used to modify behavior of some actions and resolvers of Emmet.",
                      "properties": {
                        "bem.elementSeparator": {
                          "default": "__",
                          "markdownDescription": "Element separator used for classes when using the BEM filter.",
                          "type": "string"
                        },
                        "bem.modifierSeparator": {
                          "default": "_",
                          "markdownDescription": "Modifier separator used for classes when using the BEM filter.",
                          "type": "string"
                        },
                        "css.color.short": {
                          "default": true,
                          "markdownDescription": "If `true`, color values like `#f` will be expanded to `#fff` instead of `#ffffff`.",
                          "type": "boolean"
                        },
                        "css.floatUnit": {
                          "default": "em",
                          "markdownDescription": "Default unit for float values.",
                          "type": "string"
                        },
                        "css.fuzzySearchMinScore": {
                          "default": 0.3,
                          "markdownDescription": "The minimum score (from 0 to 1) that fuzzy-matched abbreviation should achieve. Lower values may produce many false-positive matches, higher values may reduce possible matches.",
                          "type": "number"
                        },
                        "css.intUnit": {
                          "default": "px",
                          "markdownDescription": "Default unit for integer values.",
                          "type": "string"
                        },
                        "css.mozProperties": {
                          "default": null,
                          "markdownDescription": "Comma separated CSS properties that get the 'moz' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'moz' prefix.",
                          "type": "string"
                        },
                        "css.msProperties": {
                          "default": null,
                          "markdownDescription": "Comma separated CSS properties that get the 'ms' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'ms' prefix.",
                          "type": "string"
                        },
                        "css.oProperties": {
                          "default": null,
                          "markdownDescription": "Comma separated CSS properties that get the 'o' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'o' prefix.",
                          "type": "string"
                        },
                        "css.propertyEnd": {
                          "default": ";",
                          "markdownDescription": "Symbol to be placed at the end of CSS property when expanding CSS abbreviations.",
                          "type": "string"
                        },
                        "css.valueSeparator": {
                          "default": ": ",
                          "markdownDescription": "Symbol to be placed at the between CSS property and value when expanding CSS abbreviations.",
                          "type": "string"
                        },
                        "css.webkitProperties": {
                          "default": null,
                          "markdownDescription": "Comma separated CSS properties that get the 'webkit' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'webkit' prefix.",
                          "type": "string"
                        },
                        "filter.commentAfter": {
                          "default": "\n<!-- /[#ID][.CLASS] -->",
                          "markdownDescription": "A definition of comment that should be placed after matched element when comment filter is applied.",
                          "type": "string"
                        },
                        "filter.commentBefore": {
                          "default": "",
                          "markdownDescription": "A definition of comment that should be placed before matched element when comment filter is applied.",
                          "type": "string"
                        },
                        "filter.commentTrigger": {
                          "default": [
                            "id",
                            "class"
                          ],
                          "markdownDescription": "A comma-separated list of attribute names that should exist in the abbreviation for the comment filter to be applied.",
                          "type": "array"
                        },
                        "format.forceIndentationForTags": {
                          "default": [
                            "body"
                          ],
                          "markdownDescription": "An array of tag names that should always get inner indentation.",
                          "type": "array"
                        },
                        "format.noIndentTags": {
                          "default": [
                            "html"
                          ],
                          "markdownDescription": "An array of tag names that should never get inner indentation.",
                          "type": "array"
                        },
                        "output.inlineBreak": {
                          "default": 0,
                          "markdownDescription": "The number of sibling inline elements needed for line breaks to be placed between those elements. If `0`, inline elements are always expanded onto a single line.",
                          "type": "number"
                        },
                        "output.reverseAttributes": {
                          "default": false,
                          "markdownDescription": "If `true`, reverses attribute merging directions when resolving snippets.",
                          "type": "boolean"
                        },
                        "output.selfClosingStyle": {
                          "default": "html",
                          "enum": [
                            "html",
                            "xhtml",
                            "xml"
                          ],
                          "markdownDescription": "Style of self-closing tags: html (`<br>`), xml (`<br/>`) or xhtml (`<br />`).",
                          "type": "string"
                        },
                        "profile.allowCompactBoolean": {
                          "default": false,
                          "markdownDescription": "If `true`, compact notation of boolean attributes are produced.",
                          "type": "boolean"
                        },
                        "sass.propertyEnd": {
                          "default": "",
                          "markdownDescription": "Symbol to be placed at the end of CSS property when expanding CSS abbreviations in Sass files.",
                          "type": "string"
                        },
                        "sass.valueSeparator": {
                          "default": ": ",
                          "markdownDescription": "Symbol to be placed at the between CSS property and value when expanding CSS abbreviations in Sass files.",
                          "type": "string"
                        },
                        "stylus.propertyEnd": {
                          "default": "",
                          "markdownDescription": "Symbol to be placed at the end of CSS property when expanding CSS abbreviations in Stylus files.",
                          "type": "string"
                        },
                        "stylus.valueSeparator": {
                          "default": " ",
                          "markdownDescription": "Symbol to be placed at the between CSS property and value when expanding CSS abbreviations in Stylus files.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "emmet.showAbbreviationSuggestions": {
                      "default": true,
                      "markdownDescription": "Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `\"never\"`.",
                      "type": "boolean"
                    },
                    "emmet.showExpandedAbbreviation": {
                      "default": "always",
                      "enum": [
                        "never",
                        "always",
                        "inMarkupAndStylesheetFilesOnly"
                      ],
                      "markdownDescription": "Shows expanded Emmet abbreviations as suggestions.\nThe option `\"inMarkupAndStylesheetFilesOnly\"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.\nThe option `\"always\"` applies to all parts of the file regardless of markup/css.",
                      "type": [
                        "string"
                      ]
                    },
                    "emmet.showSuggestionsAsSnippets": {
                      "default": false,
                      "markdownDescription": "If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `#editor.snippetSuggestions#` setting.",
                      "type": "boolean"
                    },
                    "emmet.syntaxProfiles": {
                      "default": {},
                      "markdownDescription": "Define profile for specified syntax or use your own profile with specific rules.",
                      "type": "object"
                    },
                    "emmet.variables": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "default": {},
                      "markdownDescription": "Variables to be used in Emmet snippets.",
                      "properties": {
                        "charset": {
                          "default": "UTF-8",
                          "type": "string"
                        },
                        "lang": {
                          "default": "en",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "volar.autoCompleteRefs": {
                      "default": false,
                      "description": "Auto-complete Ref value with `.value`.",
                      "type": "boolean"
                    },
                    "volar.autoWrapParentheses": {
                      "default": true,
                      "description": "Auto-wrap `()` to As Expression in interpolations for fix issue #520.",
                      "type": "boolean"
                    },
                    "volar.codeLens.pugTools": {
                      "default": false,
                      "description": "[pug \u2610] code lens.",
                      "type": "boolean"
                    },
                    "volar.codeLens.references": {
                      "default": true,
                      "description": "[references] code lens.",
                      "type": "boolean"
                    },
                    "volar.codeLens.scriptSetupTools": {
                      "default": false,
                      "description": "[ref sugar \u2610] code lens.",
                      "type": "boolean"
                    },
                    "volar.completion.normalizeComponentAutoImportName": {
                      "type": "boolean",
                      "default": true,
                      "description": "Normalize import name for auto import. (\"myCompVue\" -> \"MyComp\")"
                    },
                    "volar.completion.preferredAttrNameCase": {
                      "default": "auto-kebab",
                      "description": "Preferred attr name case.",
                      "enum": [
                        "auto-kebab",
                        "auto-camel",
                        "kebab",
                        "camel"
                      ],
                      "enumDescriptions": [
                        "Auto Detect from Content (Preferred :kebab-case=\"...\")",
                        "Auto Detect from Content (Preferred :camelCase=\"...\")",
                        ":kebab-case=\"...\"",
                        ":camelCase=\"...\""
                      ],
                      "type": "string"
                    },
                    "volar.completion.preferredTagNameCase": {
                      "default": "auto-pascal",
                      "description": "Preferred tag name case.",
                      "enum": [
                        "auto-kebab",
                        "auto-pascal",
                        "kebab",
                        "pascal"
                      ],
                      "enumDescriptions": [
                        "Auto Detect from Content (Preferred <kebab-case>)",
                        "Auto Detect from Content (Preferred <PascalCase>)",
                        "<kebab-case>",
                        "<PascalCase>"
                      ],
                      "type": "string"
                    },
                    "volar.diagnostics.delay": {
                      "default": 200,
                      "description": "Delay time for diagnostics.",
                      "type": "number"
                    },
                    "volar.format.initialIndent": {
                      "default": {
                        "html": true
                      },
                      "description": "Whether to have initial indent.",
                      "properties": {
                        "css": {
                          "default": false,
                          "type": "boolean"
                        },
                        "html": {
                          "default": true,
                          "type": "boolean"
                        },
                        "javascript": {
                          "default": false,
                          "type": "boolean"
                        },
                        "javascriptreact": {
                          "default": false,
                          "type": "boolean"
                        },
                        "json": {
                          "default": false,
                          "type": "boolean"
                        },
                        "jsonc": {
                          "default": false,
                          "type": "boolean"
                        },
                        "less": {
                          "default": false,
                          "type": "boolean"
                        },
                        "scss": {
                          "default": false,
                          "type": "boolean"
                        },
                        "typescript": {
                          "default": false,
                          "type": "boolean"
                        },
                        "typescriptreact": {
                          "default": false,
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "typescript.inlayHints.enumMemberValues.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for member values in enum declarations: \n\n ```typescript\n enum MyValue {\n   A /* = 0 */;\n   B /* = 1 */;\n }\n ```\n \n Require TypeScript 4.4+."
                    },
                    "typescript.inlayHints.functionLikeReturnTypes.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for implicit return types on function signatures:\n\n ```typescript\n function foo() /* :number */ {\n   return Date.now();\n }\n ```\n Require TypeScript 4.4+."
                    },
                    "typescript.inlayHints.parameterTypes.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for parameter names: \n\n ```typescript\n parseInt(/* str: */ '123', /* radix: */ 8)\n ```\n Require TypeScript 4.4+."
                    },
                    "typescript.inlayHints.parameterNames.enabled": {
                      "enum": [
                        "all",
                        "literals",
                        "none"
                      ],
                      "default": "none",
                      "markdownEnumDescriptions": [
                        "Enable parameter name hints for literal and non-literal arguments.",
                        "Enable parameter name hints only for literal arguments.",
                        "Disable parameter name hints."
                      ]
                    },
                    "typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": ""
                    },
                    "typescript.inlayHints.propertyDeclarationTypes.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for implicit types on property declarations: \n\n ```typescript\n class Foo {\n   prop /* :number */ = Date.now;\n }\n ```\n Require TypeScript 4.4+."
                    },
                    "typescript.inlayHints.variableTypes.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for implicit variable types: \n\n ```typescript\n const foo /* :number */ = Date.now();\n ``` \n Require TypeScript 4.4+."
                    },
                    "typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName.enabled": {
                      "type": "boolean",
                      "default": true,
                    },
                    "javascript.inlayHints.enumMemberValues.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for member values in enum declarations: \n\n ```typescript\n enum MyValue {\n   A /* = 0 */;\n   B /* = 1 */;\n }\n ```\n \n Require TypeScript 4.4+."
                    },
                    "javascript.inlayHints.functionLikeReturnTypes.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for implicit return types on function signatures:\n\n ```typescript\n function foo() /* :number */ {\n   return Date.now();\n }\n ```\n Require TypeScript 4.4+."
                    },
                    "javascript.inlayHints.parameterTypes.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for parameter names: \n\n ```typescript\n parseInt(/* str: */ '123', /* radix: */ 8)\n ```\n Require TypeScript 4.4+."
                    },
                    "javascript.inlayHints.parameterNames.enabled": {
                      "enum": [
                        "all",
                        "literals",
                        "none"
                      ],
                      "default": "none",
                      "markdownEnumDescriptions": [
                        "Enable parameter name hints for literal and non-literal arguments.",
                        "Enable parameter name hints only for literal arguments.",
                        "Disable parameter name hints."
                      ]
                    },
                    "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": ""
                    },
                    "javascript.inlayHints.propertyDeclarationTypes.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for implicit types on property declarations: \n\n ```typescript\n class Foo {\n   prop /* :number */ = Date.now;\n }\n ```\n Require TypeScript 4.4+."
                    },
                    "javascript.inlayHints.variableTypes.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for implicit variable types: \n\n ```typescript\n const foo /* :number */ = Date.now();\n ``` \n Require TypeScript 4.4+."
                    },
                    "javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName.enabled": {
                      "type": "boolean",
                      "default": true,
                    }
                  }
                }
              }
            }
          },
          "allOf": [
            {
              "$ref": "sublime://settings/LSP-plugin-base"
            },
            {
              "$ref": "sublime://settings/LSP-volar#/definitions/PluginConfig"
            }
          ]
        }
      },
      {
        "file_patterns": [
          "/*.sublime-project"
        ],
        "schema": {
          "properties": {
            "settings": {
              "properties": {
                "LSP": {
                  "properties": {
                    "LSP-volar": {
                      "$ref": "sublime://settings/LSP-volar#/definitions/PluginConfig"
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "file_patterns": [
          "/tsconfig.json",
          "/tsconfig-*.json",
          "/tsconfig.*.json",
          "/jsconfig.json",
          "/jsconfig-*.json",
          "/jsconfig.*.json",
        ],
        "schema": {
          "properties": {
            "vueCompilerOptions": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "target": {
                  "type": "number",
                  "default": 3,
                  "anyOf": [
                    {
                      "enum": [
                        2,
                        2.7,
                        3
                      ]
                    }
                  ],
                  "markdownDescription": "Target version of Vue."
                },
                "extensions": {
                  "type": "array",
                  "default": [ ".vue" ],
                  "markdownDescription": "Valid file extensions that should be considered as regular Vue SFC. Please note that you should not use this option separately for additional file extensions IDE support, see https://github.com/johnsoncodehk/volar/tree/master/extensions/vscode-vue-language-features/README.md#custom-file-extensions."
                },
                "jsxTemplates": {
                  "type": "boolean",
                  "default": false,
                  "markdownDescription": "Whether to compile template to JSX. (Generics component type checking only working with JSX)"
                },
                "strictTemplates": {
                  "type": "boolean",
                  "default": false,
                  "markdownDescription": "Strict props, component type-checking in templates."
                },
                "skipTemplateCodegen": {
                  "type": "boolean",
                  "markdownDescription": "https://github.com/johnsoncodehk/volar/issues/577"
                },
                "nativeTags": {
                  "type": "array",
                  "default": [
                    "div",
                    "img",
                    "..."
                  ],
                  "markdownDescription": "List of valid intrinsic elements."
                },
                "dataAttributes": {
                  "type": "array",
                  "default": [
                    "data-*"
                  ],
                  "markdownDescription": "A glob matcher array that should always avoid recognized as HTML Attributes and Component props."
                },
                "htmlAttributes": {
                  "type": "array",
                  "default": [
                    "aria-*"
                  ],
                  "markdownDescription": "A glob matcher array that should always be recognizing as HTML Attributes rather than Component props. Attribute name will never convert to camelize case."
                },
                "plugins": {
                  "type": "array",
                  "default": [],
                  "markdownDescription": "Plugins to be used in the SFC compiler."
                },
                "optionsWrapper": {
                  "type": "array",
                  "default": [
                    "(await import('vue')).defineComponent(",
                    ")"
                  ],
                  "markdownDescription": "How to wrap option of `export default { ... }`? Default: `[\"(await import('vue')).default.extend(\", \")\"]` for target < 2.7, `[\"(await import('vue')).defineComponent(\", \")\"]` for target >= 2.7."
                },
                "narrowingTypesInInlineHandlers": {
                  "type": "boolean",
                  "markdownDescription": "https://github.com/johnsoncodehk/volar/issues/1249"
                },
                "bypassDefineComponentToExposePropsAndEmitsForJsScriptSetupComponents": {
                  "type": "boolean",
                  "markdownDescription": "https://github.com/johnsoncodehk/volar/issues/1192"
                },
                "experimentalResolveStyleCssClasses": {
                  "enum": [
                    "scoped",
                    "always",
                    "never"
                  ],
                  "markdownDescription": "https://github.com/johnsoncodehk/volar/issues/1038, https://github.com/johnsoncodehk/volar/issues/1121"
                },
                "experimentalRfc436": {
                  "type": "boolean",
                  "default": false,
                  "markdownDescription": "https://github.com/vuejs/rfcs/discussions/436"
                },
                "experimentalUseElementAccessInTemplate": {
                  "type": "boolean",
                  "default": false,
                  "markdownDescription": "https://github.com/johnsoncodehk/volar/issues/997"
                },
                "experimentalModelPropName": {
                  "type": "object",
                  "default": {
                    "": {
                      "input": {
                        "type": "radio"
                      }
                    },
                    "checked": {
                      "input": {
                        "type": "checkbox"
                      }
                    },
                    "value": {
                      "input": true,
                      "textarea": true,
                      "select": true
                    }
                  },
                  "markdownDescription": "https://github.com/johnsoncodehk/volar/issues/1969"
                }
              }
            }
          }
        }
      },
    ]
  }
}
