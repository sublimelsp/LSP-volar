{
  "contributions": {
    "settings": [
      {
        "file_patterns": [
          "/LSP-volar.sublime-settings"
        ],
        "schema": {
          "$id": "sublime://settings/LSP-volar",
          "definitions": {
            "PluginConfig": {
              "properties": {
                "initializationOptions": {
                  "additionalProperties": false,
                  "properties": {
                    "typescript": {
                      "additionalProperties": false,
                      "properties": {
                        "serverPath": {
                          "type": "string",
                          "description": "Path to tsserverlibrary.js / tsserver.js / typescript.js."
                        },
                        "localizedPath": {
                          "type": "string",
                          "description": "Path to lib/xxx/diagnosticMessages.generated.json"
                        }
                      }
                    }
                  }
                },
                "settings": {
                  "additionalProperties": false,
                  "properties": {
                    "volar.ignoreTriggerCharacters": {
                      "type": "string",
                      "default": "",
                      "description": "Do not trigger the auto-complete popup on these characters."
                    },
                    "volar.autoCompleteRefs": {
                      "default": false,
                      "description": "Auto-complete Ref value with `.value`.",
                      "type": "boolean"
                    },
                    "volar.autoWrapParentheses": {
                      "default": true,
                      "description": "Auto-wrap `()` to As Expression in interpolations for fix issue #520.",
                      "type": "boolean"
                    },
                    "volar.codeLens.pugTools": {
                      "default": false,
                      "description": "[pug \u2610] code lens.",
                      "type": "boolean"
                    },
                    "volar.codeLens.references": {
                      "default": true,
                      "description": "[references] code lens.",
                      "type": "boolean"
                    },
                    "volar.codeLens.scriptSetupTools": {
                      "default": false,
                      "description": "[ref sugar \u2610] code lens.",
                      "type": "boolean"
                    },
                    "volar.completion.autoImportComponent": {
                      "default": true,
                      "description": "Enabled auto-import for component with tag completion.",
                      "type": "boolean"
                    },
                    "volar.completion.preferredAttrNameCase": {
                      "default": "auto-kebab",
                      "description": "Preferred attr name case.",
                      "enum": [
                        "auto-kebab",
                        "auto-camel",
                        "kebab",
                        "camel"
                      ],
                      "enumDescriptions": [
                        "Auto Detect from Content (Preferred :kebab-case=\"...\")",
                        "Auto Detect from Content (Preferred :camelCase=\"...\")",
                        ":kebab-case=\"...\"",
                        ":camelCase=\"...\""
                      ],
                      "type": "string"
                    },
                    "volar.completion.preferredTagNameCase": {
                      "default": "auto",
                      "description": "Preferred tag name case.",
                      "enum": [
                        "auto",
                        "both",
                        "kebab",
                        "pascal"
                      ],
                      "enumDescriptions": [
                        "Auto Detect from Content",
                        "<kebab-case> and <PascalCase>",
                        "<kebab-case>",
                        "<PascalCase>"
                      ],
                      "type": "string"
                    },
                    "volar.vueserver.textDocumentSync": {
                      "type": "string",
                      "default": "incremental",
                      "enum": [
                        "incremental",
                        "full",
                        "none"
                      ],
                      "enumDescriptions": [
                        "Documents are synced by sending the full content on open. After that only incremental updates to the document are send.",
                        "Documents are synced by always sending the full content of the document.",
                        "Documents should not be synced at all."
                      ],
                      "description": "Defines how the host (editor) should sync document changes to the language server. SFC incremental parser only working when config \"incremental\"."
                    },
                    "volar.vueserver.maxOldSpaceSize": {
                      "default": null,
                      "description": "Set --max-old-space-size option on server process. If you have problem on frequently \"Request textDocument/** failed.\" error, try setting higher memory(MB) on it.",
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "typescript.inlayHints.enumMemberValues.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for member values in enum declarations: \n\n ```typescript\n enum MyValue {\n   A /* = 0 */;\n   B /* = 1 */;\n }\n ```\n \n Require TypeScript 4.4+."
                    },
                    "typescript.inlayHints.functionLikeReturnTypes.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for implicit return types on function signatures:\n\n ```typescript\n function foo() /* :number */ {\n   return Date.now();\n }\n ```\n Require TypeScript 4.4+."
                    },
                    "typescript.inlayHints.parameterTypes.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for parameter names: \n\n ```typescript\n parseInt(/* str: */ '123', /* radix: */ 8)\n ```\n Require TypeScript 4.4+."
                    },
                    "typescript.inlayHints.parameterNames.enabled": {
                      "enum": [
                        "all",
                        "literals",
                        "none"
                      ],
                      "default": "none",
                      "markdownEnumDescriptions": [
                        "Enable parameter name hints for literal and non-literal arguments.",
                        "Enable parameter name hints only for literal arguments.",
                        "Disable parameter name hints."
                      ]
                    },
                    "typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": ""
                    },
                    "typescript.inlayHints.propertyDeclarationTypes.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for implicit types on property declarations: \n\n ```typescript\n class Foo {\n   prop /* :number */ = Date.now;\n }\n ```\n Require TypeScript 4.4+."
                    },
                    "typescript.inlayHints.variableTypes.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for implicit variable types: \n\n ```typescript\n const foo /* :number */ = Date.now();\n ``` \n Require TypeScript 4.4+."
                    },
                    "javascript.inlayHints.enumMemberValues.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for member values in enum declarations: \n\n ```typescript\n enum MyValue {\n   A /* = 0 */;\n   B /* = 1 */;\n }\n ```\n \n Require TypeScript 4.4+."
                    },
                    "javascript.inlayHints.functionLikeReturnTypes.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for implicit return types on function signatures:\n\n ```typescript\n function foo() /* :number */ {\n   return Date.now();\n }\n ```\n Require TypeScript 4.4+."
                    },
                    "javascript.inlayHints.parameterTypes.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for parameter names: \n\n ```typescript\n parseInt(/* str: */ '123', /* radix: */ 8)\n ```\n Require TypeScript 4.4+."
                    },
                    "javascript.inlayHints.parameterNames.enabled": {
                      "enum": [
                        "all",
                        "literals",
                        "none"
                      ],
                      "default": "none",
                      "markdownEnumDescriptions": [
                        "Enable parameter name hints for literal and non-literal arguments.",
                        "Enable parameter name hints only for literal arguments.",
                        "Disable parameter name hints."
                      ]
                    },
                    "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": ""
                    },
                    "javascript.inlayHints.propertyDeclarationTypes.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for implicit types on property declarations: \n\n ```typescript\n class Foo {\n   prop /* :number */ = Date.now;\n }\n ```\n Require TypeScript 4.4+."
                    },
                    "javascript.inlayHints.variableTypes.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable/disable inlay hints for implicit variable types: \n\n ```typescript\n const foo /* :number */ = Date.now();\n ``` \n Require TypeScript 4.4+."
                    }
                  }
                }
              }
            }
          },
          "allOf": [
            {
              "$ref": "sublime://settings/LSP-plugin-base"
            },
            {
              "$ref": "sublime://settings/LSP-volar#/definitions/PluginConfig"
            }
          ]
        }
      },
      {
        "file_patterns": [
          "/*.sublime-project"
        ],
        "schema": {
          "properties": {
            "settings": {
              "properties": {
                "LSP": {
                  "properties": {
                    "LSP-volar": {
                      "$ref": "sublime://settings/LSP-volar#/definitions/PluginConfig"
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "file_patterns": [
          "/tsconfig.json",
          "/tsconfig-*.json",
          "/tsconfig.*.json",
          "/jsconfig.json",
          "/jsconfig-*.json",
          "/jsconfig.*.json",
        ],
        "schema": {
          "properties": {
            "vueCompilerOptions": {
              "type": "object",
              "properties": {
                "target": {
                  "type": "number",
                  "default": 3,
                  "anyOf": [
                    {
                      "enum": [
                        2,
                        2.7,
                        3
                      ]
                    }
                  ],
                  "markdownDescription": "Target version of Vue."
                },
                "strictTemplates": {
                  "type": "boolean",
                  "default": false,
                  "markdownDescription": "Strict props, component type-checking in templates."
                },
                "experimentalRuntimeMode": {
                  "type": "string",
                  "default": "runtime-dom",
                  "anyOf": [
                    {
                      "enum": [
                        "runtime-dom",
                        "runtime-uni-app"
                      ]
                    }
                  ],
                  "markdownDescription": "Run app in browser or uni-app"
                },
                "experimentalComponentOptionsWrapper": {
                  "type": "array",
                  "default": [
                    "(await import('vue')).defineComponent(",
                    ")"
                  ],
                  "markdownDescription": "How to wrap option of `export default { ... }`? Default: `[\"(await import('vue')).default.extend(\", \")\"]` for target < 2.7, `[\"(await import('vue')).defineComponent(\", \")\"]` for target >= 2.7."
                },
                "experimentalComponentOptionsWrapperEnable": {
                  "enum": [
                    true,
                    false,
                    "onlyJs"
                  ],
                  "default": "onlyJs",
                  "markdownDescription": "Enable `experimentalComponentOptionsWrapper`?"
                },
                "experimentalDowngradePropsAndEmitsToSetupReturnOnScriptSetup": {
                  "enum": [
                    true,
                    false,
                    "onlyJs"
                  ],
                  "markdownDescription": "https://github.com/johnsoncodehk/volar/issues/1192"
                },
                "experimentalTemplateCompilerOptions": {
                  "type": "object",
                  "markdownDescription": "https://github.com/johnsoncodehk/volar/issues/576"
                },
                "experimentalTemplateCompilerOptionsRequirePath": {
                  "type": "string",
                  "markdownDescription": "https://github.com/johnsoncodehk/volar/issues/698"
                },
                "experimentalDisableTemplateSupport": {
                  "type": "boolean",
                  "markdownDescription": "https://github.com/johnsoncodehk/volar/issues/577"
                },
                "experimentalAllowTypeNarrowingInInlineHandlers": {
                  "type": "boolean",
                  "markdownDescription": "https://github.com/johnsoncodehk/volar/issues/1249"
                },
                "experimentalUseScriptLeadingCommentInTemplate": {
                  "type": "boolean",
                  "markdownDescription": "https://github.com/johnsoncodehk/volar/issues/1369"
                },
                "experimentalResolveStyleCssClasses": {
                  "enum": [
                    "scoped",
                    "always",
                    "never"
                  ],
                  "markdownDescription": "https://github.com/johnsoncodehk/volar/issues/1038, https://github.com/johnsoncodehk/volar/issues/1121"
                }
              }
            }
          }
        }
      },
    ]
  }
}
