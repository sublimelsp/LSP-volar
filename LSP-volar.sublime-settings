{
	"initializationOptions": {
		// List any additional file extensions that should be processed as Vue files.
		"additionalExtensions": [],
		// Disable file watcher in language server for better performance.
		"disableFileWatcher": false,
		// Path to volar.config.js.
		"configFilePath": "./volar.config.js",
		// Maximum file size for Vue Server to load. (default: 20MB)
		"maxFileSize": 20971520,
		// Defines which auto-complete popup trigger characters that Volar defines are allowed.
		// By default all Volar trigger characters are disabled as ST does a better job.
		"ignoreTriggerCharacters": [],
		"json.customBlockSchemaUrls": {},
		// Specify the `typescript.tsdk` to tsserverlibrary.js.
		// If not specified LSP-volar will use the typescript from the workspace if it exist,
		// else the typescript bundled with LSP-volar will be used.
		// "typescript.tsdk": "/path/to/tsserverlibrary.js"
		// Set --max-old-space-size option on server process. If you have problem on frequently
		// "Request textDocument/** failed." error, try setting higher memory(MB) on it.
		"maxOldSpaceSize": null,
		// Ignore project references settings of tsconfig in language server for resolve issue
		// https://github.com/johnsoncodehk/volar/issues/1344.
		"noProjectReferences": false,
		"respectClientCapabilities": true,
		// Reverse priority for tsconfig pickup.
		"reverseConfigFilePriority": false,
	},
	"settings": {
		// Auto-complete Ref value with `.value`.
		"volar.autoCompleteRefs": false,
		// Auto-wrap `()` to As Expression in interpolations for fix issue #520.
		"volar.autoWrapParentheses": true,
		// [pug ☐] code lens.
		"volar.codeLens.pugTools": false,
		// [references] code lens.
		"volar.codeLens.references": true,
		// [ref sugar ☐] code lens.
		"volar.codeLens.scriptSetupTools": false,
		// Normalize import name for auto import. ("myCompVue" -> "MyComp")
		"volar.completion.normalizeComponentAutoImportName": true,
		// Preferred attr name case.
		// possible values: "auto-kebab", "auto-camel", "kebab", "camel"
		"volar.completion.preferredAttrNameCase": "auto-kebab",
		// Preferred tag name case.
		// possible values: "auto-kebab", "auto-pascal", "kebab", "pascal"
		"volar.completion.preferredTagNameCase": "auto-pascal",
		// Delay time for diagnostics.
		"volar.diagnostics.delay": 200,
		// Whether to have initial indent.
		"volar.format.initialIndent": {
			"css": false,
			"html": true,
			"javascript": false,
			"javascriptreact": false,
			"json": false,
			"jsonc": false,
			"scss": false,
			"typescript": false,
			"typescriptreact": false,
		},

		// javascript inlay hint
		"javascript.inlayHints.enumMemberValues.enabled": false,
		"javascript.inlayHints.functionLikeReturnTypes.enabled": false,
		"javascript.inlayHints.parameterNames.enabled": "none",
		"javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
		"javascript.inlayHints.parameterTypes.enabled": false,
		"javascript.inlayHints.propertyDeclarationTypes.enabled": false,
		"javascript.inlayHints.variableTypes.enabled": false,
		"javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName.enabled": true,

		// typescript inlay hint
		"typescript.inlayHints.enumMemberValues.enabled": false,
		"typescript.inlayHints.functionLikeReturnTypes.enabled": false,
		"typescript.inlayHints.parameterNames.enabled": "none",
		"typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
		"typescript.inlayHints.parameterTypes.enabled": false,
		"typescript.inlayHints.propertyDeclarationTypes.enabled": false,
		"typescript.inlayHints.variableTypes.enabled": false,
		"typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName.enabled": true,

		// javascript completions
		"javascript.suggest.autoImports": false,  // Disabled by default due to UI freezes that large completion responses cause.
		"javascript.suggest.classMemberSnippets.enabled": true,
		"javascript.suggest.completeFunctionCalls": false,
		"javascript.suggest.includeAutomaticOptionalChainCompletions": true,
		"javascript.suggest.includeCompletionsForImportStatements": true,
		"javascript.suggest.includeCompletionsWithSnippetText": true,
		"javascript.suggest.jsdoc.generateReturns": true,
		"javascript.suggest.objectLiteralMethodSnippets.enabled": true,

		// typescript completions
		"typescript.suggest.autoImports": false,  // Disabled by default due to UI freezes that large completion responses cause.
		"typescript.suggest.classMemberSnippets.enabled": true,
		"typescript.suggest.completeFunctionCalls": false,
		"typescript.suggest.includeAutomaticOptionalChainCompletions": true,
		"typescript.suggest.includeCompletionsForImportStatements": true,
		"typescript.suggest.includeCompletionsWithSnippetText": true,
		"typescript.suggest.jsdoc.generateReturns": true,
		"typescript.suggest.objectLiteralMethodSnippets.enabled": true,

		// Other javascript options
		"javascript.preferences.quoteStyle": "auto",
		"javascript.preferences.importModuleSpecifier": "shortest",
		"javascript.preferences.importModuleSpecifierEnding": "auto",
		"javascript.preferences.jsxAttributeCompletionStyle": "auto",
		"javascript.preferences.autoImportFileExcludePatterns": [],

		// Other typescript options
		"typescript.preferences.quoteStyle": "auto",
		"typescript.preferences.importModuleSpecifier": "shortest",
		"typescript.preferences.importModuleSpecifierEnding": "auto",
		"typescript.preferences.jsxAttributeCompletionStyle": "auto",
		"typescript.preferences.autoImportFileExcludePatterns": [],


		// Emmet plugin settings (autocompletion within template blocks).

		// An array of languages where Emmet abbreviations should not be expanded.
		"emmet.excludeLanguages": ["markdown"],
		// Preferences used to modify behavior of some actions and resolvers of Emmet.
		"emmet.preferences": {},
		// Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when
		// emmet.showExpandedAbbreviation is set to `"never"`.
		"emmet.showAbbreviationSuggestions": true,
		// Shows expanded Emmet abbreviations as suggestions.
		// The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade, slim, xml,
		// xsl, css, scss, sass, less and stylus.
		// The option `"always"` applies to all parts of the file regardless of markup/css.
		// possible values: "never", "always", "inMarkupAndStylesheetFilesOnly"
		"emmet.showExpandedAbbreviation": "always",
		// If `true`, then Emmet suggestions will show up as snippets allowing you to order them as
		// per `#editor.snippetSuggestions#` setting.
		"emmet.showSuggestionsAsSnippets": false,
		// Define profile for specified syntax or use your own profile with specific rules.
		"emmet.syntaxProfiles": {},
		// Variables to be used in Emmet snippets.
		"emmet.variables": {},
	},
	"command": ["${node_bin}", "${server_path}", "--stdio"],
	// ST4
	"selector": "text.html.vue",
	// ST3
	"languages": [
		{
			"languageId": "vue",
			"scopes": ["text.html.vue"],
			"syntaxes": ["Packages/Vue Syntax Highlight/Vue Component.sublime-syntax"],
		}
	]
}
